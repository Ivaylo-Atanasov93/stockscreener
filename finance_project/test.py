# Забележка: Фор циклите използващи някакъв диапазон (range) и броенето
# като цяло при компютрите започват от 0 по подразбиране, тоест в този
# случай i ще бъде 0, 1, 2, 3, 4, след което цикъла ще е приключил.
# Разбирай го като все едно му казваш принтирай ми числата от 0 до 5,
# където 5 е изключено, тъй като броим ДО него, не до него включително.
# По натам когато стигнеш до тях ще ги научиш по-добре.
# С фор цикли, задачата ти от вчера, в която принтираш 20 числа, може да
# бъде решена с 2 реда код:
print('Ей тва тука ти е първия пример за фор цикъл')
for i in range(1, 21):
    print(i)
    # range() e функция, която може да вземе в скобите рааделени със запетаи
    # следните параметри: range(начало, край, стъпка)
    # например може да принтираме числата от 1 до 20 през едно:
print()  # Тва тука е само за да раздели резултатите между двата цикъла с
# празен ред, за да е по прегледно.
print('Ей тва тука ти е втория пример за фор цикъл със стъпка')
for i in range(1, 21, 2):
    print(i)

# Та... решението на твоята задача, за която ме попита ще бъде:
x = int(input('Enter your input here: '))
# Запази ми инпута от потребителя в променливата Х
for i in range(x):
    # За всяко число от 0 до х
    if i == 0 or i == x - 1:
        # Ако текущото число (i) е равно на 0, или е равно на х - 1
        print('*' * x)
        # Принтирай ми символа * толкова пъти, колкото е х
    else:
        # За всички останали случаи
        print('*' + (x - 2) * ' ' + '*')
        # Принтирай ми символа *, след това изпринтирай
        # празни интервали толкова пъти колкото е резултатът от х - 2, защото
        # тогава ни трябват само стените (по един символ в ляво и в дясно),
        # в средата искаме да е празно

# import yfinance as yf
# from stock import HistoryPrices, Asset
#
#
# def load_ticker(ticker):
#     pass
#
#
# def get_historical_prices(ticker):
#     return yf.download(ticker)
#
#
# asset = load_ticker('msft')
# print(
#     f'THIS IS THE ASSET INFO: {[print(f"KEY:{key}  INFO: {value}") for key, value in asset.info.items()]}')
# data = get_historical_prices('^GSPC')
#
# stock_prices = HistoryPrices(
#     dates=data.index,
#     oopen=data['Open'],
#     high=data['High'],
#     low=data['Low'],
#     close=data['Close'],
#     adj_close=data['Adj Close'],
#     volume=data['Volume'],
# )
#
# print(stock_prices.open)
